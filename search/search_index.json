{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyMarkovClustering","text":""},{"location":"#table-of-contents","title":"Table of contents","text":"<ul> <li>Overview</li> <li>Installation</li> <li>API Usage</li> <li>CLI Usage</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>pyMarkovClustering is a python package for Markov Clustering (MCL) and its graph visualization. While there is already a python library markov_clustering that implements the MCL algorithm, it has not been maintained for a long time and lacks some functionality. pyMarkovClustering was developed to enable easy MCL and graph visualization from edges consisting of a list of source, target, and weight.</p> <p>Note</p> <p>pyMarkovClustering adjusts matrix preprocessing and parameters to achieve the same results as mcl command-line tool. This library uses scipy sparse matrix for its MCL implementation and can cluster simple graphs with a few thousand nodes without any problems. However, if you need to cluster a complex graph with tens of thousands of nodes or more, I recommend using mcl command-line tool for better runtime performance and memory efficiency.</p>"},{"location":"#installation","title":"Installation","text":"<p><code>Python 3.9 or later</code> is required for installation. For visualization, networkx and extra packages (e.g. matplotlib, pygraphviz) are also required.</p> <p>Install PyPI package:</p> <pre><code>pip install pymarkovclustering \npip install networkx[default,extra] # For visualization\n</code></pre> <p>Install conda-forge package:</p> <pre><code>conda install -c conda-forge pymarkovclustering\nconda install -c conda-forge networkx matplotlib-base pygraphviz pydot lxml # For visualization\n</code></pre> <p>Note</p> <p>pygraphviz installation requires graphviz and C/C++ compiler. If you encounter installation troubles, see pygraphviz install docs for details.</p>"},{"location":"#api-usage","title":"API Usage","text":"<p>pyMarkovClustering provides a easy-to-use API to perform Markov Clustering from edges (list of source, target, weight). It also provides an API to visualize the clustering results using networkx. See notebooks and API docs in documents for more details.</p>"},{"location":"#markov-clustering","title":"Markov Clustering","text":""},{"location":"#simple-edges","title":"Simple edges","text":"<pre><code>import pymarkovclustering as pymcl\n\n# List of edges (source, target, weight)\nedges = [\n    (\"A\", \"B\", 10),\n    (\"A\", \"C\", 10),\n    (\"B\", \"C\", 2),\n    (\"D\", \"E\", 5),\n    (\"F\", \"G\", 2),\n    (\"H\", \"I\", 0.0),\n]\n# load edges as matrix, MCL, extract clusters\nmatrix, labels = pymcl.edges_to_sparse_matrix(edges)\nmcl_matrix = pymcl.mcl(matrix, quiet=False)\nclusters = pymcl.extract_clusters(mcl_matrix, labels)\n\nfor i, cluster in enumerate(clusters, 1):\n    print(f\"Cluster{i:03d}: {cluster}\")\n</code></pre> <p>Output:</p> <pre><code>Cluster001: ['A', 'B', 'C']  \nCluster002: ['D', 'E']  \nCluster003: ['F', 'G']  \nCluster004: ['H']  \nCluster005: ['I']  \n</code></pre>"},{"location":"#random-generated-edges","title":"Random generated edges","text":"<pre><code>import pymarkovclustering as pymcl\n\n# Generate random edges for MCL test\nedges = pymcl.random_edges(30, min_cluster_size=2, max_cluster_size=6)\nprint(f\"Edges: {edges}\\n\")\n\n# easymcl automates load edges as matrix, MCL, extract clusters\nclusters = pymcl.easymcl(edges, inflation=2.0)\n\nfor i, cluster in enumerate(clusters, 1):\n    print(f\"Cluster{i:03d}: {cluster}\")\n</code></pre> <p>Output:</p> <pre><code>Edges: [('5_2', '5_5', 0.625), ('2_1', '2_5', 0.602), ('6_4', '6_5', 0.301), ('5_3', '5_6', 0.73), ('5_2', '5_6', 0.612), ('5_3', '5_5', 0.333), ('2_3', '2_5', 0.33), ('5_1', '5_3', 0.918), ('1_2', '1_4', 0.218), ('7_1', '7_2', 0.291), ('4_2', '4_3', 0.553), ('3_1', '3_2', 0.354), ('5_3', '5_4', 0.828), ('2_2', '2_4', 0.099), ('6_2', '6_5', 0.875), ('2_1', '2_3', 0.533), ('2_1', '2_4', 0.705), ('5_4', '5_5', 0.704), ('1_1', '1_4', 0.968), ('2_2', '2_5', 0.074), ('5_1', '5_5', 0.093), ('1_2', '1_3', 0.892), ('6_2', '6_3', 0.091), ('1_3', '1_5', 0.095), ('6_2', '6_4', 0.993), ('5_2', '5_4', 0.785), ('1_1', '1_3', 0.83), ('4_3', '4_4', 0.521), ('6_1', '6_2', 0.222), ('4_1', '4_3', 0.64), ('2_3', '2_4', 0.85), ('4_1', '4_2', 0.316), ('6_1', '6_5', 0.543), ('6_3', '6_5', 0.489), ('5_1', '5_6', 0.84), ('4_1', '4_4', 0.204), ('1_3', '1_4', 0.14), ('1_2', '1_5', 0.139), ('7_1', '7_3', 0.125), ('6_1', '6_3', 0.803), ('5_4', '5_6', 0.063), ('2_2', '2_3', 0.147), ('2_1', '2_2', 0.987), ('4_2', '4_4', 0.443), ('5_2', '5_3', 0.71), ('7_2', '7_3', 0.333), ('6_3', '6_4', 0.998), ('1_4', '1_5', 0.799), ('1_1', '1_5', 0.358), ('5_1', '5_4', 0.916), ('5_1', '5_2', 0.062), ('2_4', '2_5', 0.56), ('1_1', '1_2', 0.918), ('5_5', '5_6', 0.917), ('6_1', '6_4', 0.142)]  \n\nCluster001: ['5_2', '5_5', '5_3', '5_6', '5_1', '5_4']  \nCluster002: ['2_1', '2_5', '2_3', '2_2', '2_4']  \nCluster003: ['6_4', '6_5', '6_2', '6_3', '6_1']  \nCluster004: ['1_2', '1_4', '1_1', '1_3', '1_5']  \nCluster005: ['4_2', '4_3', '4_4', '4_1']  \nCluster006: ['7_1', '7_2', '7_3']  \nCluster007: ['3_1', '3_2']  \n</code></pre>"},{"location":"#visualization","title":"Visualization","text":"<pre><code>import pymarkovclustering as pymcl\n\n# Generate random edges for MCL test\nedges = pymcl.random_edges(100, random_add_rate=0.1, min_cluster_size=2)\n\n# easymclviz automates load edges as matrix, MCL, extract clusters, visualization\nfig = pymcl.easymclviz(edges, inflation=2.0, show_label=True)\nfig.suptitle(\"Markov Clustering Result Visualization\")\nfig.savefig(\"clusters.png\", dpi=100)\n</code></pre>"},{"location":"#cli-usage","title":"CLI Usage","text":"<p>pyMarkovClustering provides simple CLI for running MCL and extract clusters from edges file.</p>"},{"location":"#option","title":"Option","text":"<pre><code>$ pymcl --help\nusage: pymcl [options] edges.tsv -o clusters.tsv\n\nMarkov Clustering in Python\n\npositional arguments:\n  edges              Input edges(source, target, weight) tab-delimited file\n\noptional arguments:\n  -o , --outfile     Output tab-delimited clusters file (default: stdout)\n  -I , --inflation   Inflation factor (default: 2.0)\n  --max_iter         Max number of iteration (default: 100)\n  -q, --quiet        No print log on screen (default: OFF)\n  -v, --version      Print version information\n  -h, --help         Show this help message and exit\n</code></pre>"},{"location":"#example-command","title":"Example Command","text":"<pre><code>pymcl edges.tsv -I 2.0 -o clusters.tsv\n</code></pre> <p>e.g. edges.tsv &gt;&gt;&gt;  clusters.tsv</p>"},{"location":"example/","title":"Code Example","text":"In\u00a0[1]: Copied! <pre># !pip install pymarkovclustering\n# !apt install graphviz graphviz-dev\n# !pip install networkx[default,extra]\n</pre> # !pip install pymarkovclustering # !apt install graphviz graphviz-dev # !pip install networkx[default,extra] In\u00a0[2]: Copied! <pre>import pymarkovclustering as pymcl\n\n# List of edges (source, target, weight)\nedges = [\n    (\"A\", \"B\", 10),\n    (\"A\", \"C\", 10),\n    (\"B\", \"C\", 2),\n    (\"D\", \"E\", 5),\n    (\"F\", \"G\", 2),\n    (\"H\", \"I\", 0.0),\n]\n# load edges as matrix, MCL, extract clusters\nmatrix, labels = pymcl.edges_to_sparse_matrix(edges)\nmcl_matrix = pymcl.mcl(matrix, quiet=False)\nclusters = pymcl.extract_clusters(mcl_matrix, labels)\n\nfor i, cluster in enumerate(clusters, 1):\n    print(f\"Cluster{i:03d}: {cluster}\")\n</pre> import pymarkovclustering as pymcl  # List of edges (source, target, weight) edges = [     (\"A\", \"B\", 10),     (\"A\", \"C\", 10),     (\"B\", \"C\", 2),     (\"D\", \"E\", 5),     (\"F\", \"G\", 2),     (\"H\", \"I\", 0.0), ] # load edges as matrix, MCL, extract clusters matrix, labels = pymcl.edges_to_sparse_matrix(edges) mcl_matrix = pymcl.mcl(matrix, quiet=False) clusters = pymcl.extract_clusters(mcl_matrix, labels)  for i, cluster in enumerate(clusters, 1):     print(f\"Cluster{i:03d}: {cluster}\") <pre>2025-05-11 13:00:29 | INFO | Starting MCL (inflation=2.0, max_iter=100)\n2025-05-11 13:00:29 | INFO | Load 9x9 matrix with 10 entries\n2025-05-11 13:00:29 | INFO | Iteration 001 done --- 0.00[s]\n2025-05-11 13:00:29 | INFO | Iteration 002 done --- 0.00[s]\n2025-05-11 13:00:29 | INFO | Iteration 003 done --- 0.00[s]\n2025-05-11 13:00:29 | INFO | Iteration 004 done --- 0.00[s]\n2025-05-11 13:00:29 | INFO | Iteration 005 done --- 0.00[s]\n2025-05-11 13:00:29 | INFO | Iteration 006 done --- 0.00[s]\n2025-05-11 13:00:29 | INFO | Iteration 007 done --- 0.00[s]\n2025-05-11 13:00:29 | INFO | 5 clusters found\n2025-05-11 13:00:29 | INFO | Finished MCL (elapsed time: 0.01[s])\n</pre> <pre>Cluster001: ['A', 'B', 'C']\nCluster002: ['D', 'E']\nCluster003: ['F', 'G']\nCluster004: ['H']\nCluster005: ['I']\n</pre> In\u00a0[3]: Copied! <pre>import pymarkovclustering as pymcl\n\n# Generate random edges for MCL test\nedges = pymcl.random_edges(30, min_cluster_size=2, max_cluster_size=6)\nprint(f\"Edges: {edges}\\n\")\n\n# easymcl automates load edges as matrix, MCL, extract clusters\nclusters = pymcl.easymcl(edges, inflation=2.0)\n\nfor i, cluster in enumerate(clusters, 1):\n    print(f\"Cluster{i:03d}: {cluster}\")\n</pre> import pymarkovclustering as pymcl  # Generate random edges for MCL test edges = pymcl.random_edges(30, min_cluster_size=2, max_cluster_size=6) print(f\"Edges: {edges}\\n\")  # easymcl automates load edges as matrix, MCL, extract clusters clusters = pymcl.easymcl(edges, inflation=2.0)  for i, cluster in enumerate(clusters, 1):     print(f\"Cluster{i:03d}: {cluster}\") <pre>Edges: [('5_2', '5_5', 0.625), ('2_1', '2_5', 0.602), ('6_4', '6_5', 0.301), ('5_3', '5_6', 0.73), ('5_2', '5_6', 0.612), ('5_3', '5_5', 0.333), ('2_3', '2_5', 0.33), ('5_1', '5_3', 0.918), ('1_2', '1_4', 0.218), ('7_1', '7_2', 0.291), ('4_2', '4_3', 0.553), ('3_1', '3_2', 0.354), ('5_3', '5_4', 0.828), ('2_2', '2_4', 0.099), ('6_2', '6_5', 0.875), ('2_1', '2_3', 0.533), ('2_1', '2_4', 0.705), ('5_4', '5_5', 0.704), ('1_1', '1_4', 0.968), ('2_2', '2_5', 0.074), ('5_1', '5_5', 0.093), ('1_2', '1_3', 0.892), ('6_2', '6_3', 0.091), ('1_3', '1_5', 0.095), ('6_2', '6_4', 0.993), ('5_2', '5_4', 0.785), ('1_1', '1_3', 0.83), ('4_3', '4_4', 0.521), ('6_1', '6_2', 0.222), ('4_1', '4_3', 0.64), ('2_3', '2_4', 0.85), ('4_1', '4_2', 0.316), ('6_1', '6_5', 0.543), ('6_3', '6_5', 0.489), ('5_1', '5_6', 0.84), ('4_1', '4_4', 0.204), ('1_3', '1_4', 0.14), ('1_2', '1_5', 0.139), ('7_1', '7_3', 0.125), ('6_1', '6_3', 0.803), ('5_4', '5_6', 0.063), ('2_2', '2_3', 0.147), ('2_1', '2_2', 0.987), ('4_2', '4_4', 0.443), ('5_2', '5_3', 0.71), ('7_2', '7_3', 0.333), ('6_3', '6_4', 0.998), ('1_4', '1_5', 0.799), ('1_1', '1_5', 0.358), ('5_1', '5_4', 0.916), ('5_1', '5_2', 0.062), ('2_4', '2_5', 0.56), ('1_1', '1_2', 0.918), ('5_5', '5_6', 0.917), ('6_1', '6_4', 0.142)]\n\nCluster001: ['5_2', '5_5', '5_3', '5_6', '5_1', '5_4']\nCluster002: ['2_1', '2_5', '2_3', '2_2', '2_4']\nCluster003: ['6_4', '6_5', '6_2', '6_3', '6_1']\nCluster004: ['1_2', '1_4', '1_1', '1_3', '1_5']\nCluster005: ['4_2', '4_3', '4_4', '4_1']\nCluster006: ['7_1', '7_2', '7_3']\nCluster007: ['3_1', '3_2']\n</pre> In\u00a0[4]: Copied! <pre>import pymarkovclustering as pymcl\n\n# Generate random edges for MCL test\nedges = pymcl.random_edges(100, random_add_rate=0.1, min_cluster_size=2)\n\n# easymclviz automates load edges as matrix, MCL, extract clusters, visualization\nfig = pymcl.easymclviz(edges, inflation=2.0, show_label=True)\nfig.suptitle(\"Markov Clustering Result Visualization\")\nfig.savefig(\"clusters.png\", dpi=100)\n</pre> import pymarkovclustering as pymcl  # Generate random edges for MCL test edges = pymcl.random_edges(100, random_add_rate=0.1, min_cluster_size=2)  # easymclviz automates load edges as matrix, MCL, extract clusters, visualization fig = pymcl.easymclviz(edges, inflation=2.0, show_label=True) fig.suptitle(\"Markov Clustering Result Visualization\") fig.savefig(\"clusters.png\", dpi=100)"},{"location":"example/#1-mcl-simple-edges","title":"1. MCL Simple Edges\u00b6","text":""},{"location":"example/#2-mcl-random-edges","title":"2. MCL Random Edges\u00b6","text":""},{"location":"example/#3-mcl-visualization","title":"3. MCL Visualization\u00b6","text":""},{"location":"api-docs/pymarkovclustering/","title":"API Docs","text":""},{"location":"api-docs/pymarkovclustering/#pymarkovclustering","title":"pymarkovclustering","text":""},{"location":"api-docs/pymarkovclustering/#pymarkovclustering.easymcl","title":"easymcl","text":"<pre><code>easymcl(\n    edges: str | Path | list[tuple[str, str, float]],\n    /,\n    *,\n    inflation: float = 2.0,\n    max_iter: int = 100,\n    quiet: bool = True,\n) -&gt; list[list[str]]\n</code></pre> <p>Run Markov Clustering from edges file or list of tuples</p> <p>easymcl automates load edges as matrix, MCL, extract clusters</p> PARAMETER DESCRIPTION <code>edges</code> <p>Edges(source, target, weight) file or list of tuples</p> <p> TYPE: <code>str | Path | list[tuple[str, str, float]]</code> </p> <code>inflation</code> <p>Inflation factor</p> <p> TYPE: <code>float</code> DEFAULT: <code>2.0</code> </p> <code>max_iter</code> <p>Max number of iterations</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>quiet</code> <p>If True, pring log on screen</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>clusters</code> <p>List of clusters, each cluster is a list of node labels</p> <p> TYPE: <code>list[list[str]]</code> </p> Notes <p>This function is designed to produce MCL results similar to <code>$ mcl abc.tsv --abc -I 2.0</code> command. See https://micans.org/mcl/man/mcl.html in detail.</p> References <p>MCL - a cluster algorithm for graphs (https://micans.org/mcl/)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pymarkovclustering as pymcl\n&gt;&gt;&gt; # easymcl automates load edges as matrix, MCL, extract clusters\n&gt;&gt;&gt; clusters = pymcl.easymcl(\"edges.tsv\")\n&gt;&gt;&gt; # easymcl is same as code below\n&gt;&gt;&gt; matrix, labels = pymcl.edges_to_sparse_matrix(\"edges.tsv\")\n&gt;&gt;&gt; mcl_matrix = pymcl.mcl(matrix)\n&gt;&gt;&gt; clusters = pymcl.extract_clusters(mcl_matrix, labels)\n</code></pre>"},{"location":"api-docs/pymarkovclustering/#pymarkovclustering.mcl","title":"mcl","text":"<pre><code>mcl(\n    matrix: ndarray | csr_matrix,\n    /,\n    *,\n    inflation: float = 2.0,\n    max_iter: int = 100,\n    quiet: bool = True,\n) -&gt; csr_matrix\n</code></pre> <p>Run Markov Clustering</p> PARAMETER DESCRIPTION <code>matrix</code> <p>Adjacency matrix</p> <p> TYPE: <code>ndarray | csr_matrix</code> </p> <code>inflation</code> <p>Inflation factor</p> <p> TYPE: <code>float</code> DEFAULT: <code>2.0</code> </p> <code>max_iter</code> <p>Max number of iterations</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>quiet</code> <p>If True, pring log on screen</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>mcl_matrix</code> <p>MCL result matrix</p> <p> TYPE: <code>csr_matrix</code> </p> Notes <p>This function is designed to produce MCL results similar to <code>$ mcl abc.tsv --abc -I 2.0</code> command. See https://micans.org/mcl/man/mcl.html in detail.</p> References <p>MCL - a cluster algorithm for graphs (https://micans.org/mcl/)</p>"},{"location":"api-docs/pymarkovclustering/#pymarkovclustering.edges_to_sparse_matrix","title":"edges_to_sparse_matrix","text":"<pre><code>edges_to_sparse_matrix(\n    edges: str | Path | list[tuple[str, str, float]],\n) -&gt; tuple[csr_matrix, list[str]]\n</code></pre> <p>Convert edges file or list of tuples to sparse matrix</p> PARAMETER DESCRIPTION <code>edges</code> <p>Edges(source, target, weight) file or list of tuples</p> <p> TYPE: <code>str | Path | list[tuple[str, str, float]]</code> </p> RETURNS DESCRIPTION <code>matrix</code> <p>Sparse matrix representation of edges</p> <p> TYPE: <code>csr_matrix</code> </p> <code>nodes</code> <p>List of node labels</p> <p> TYPE: <code>list[str]</code> </p>"},{"location":"api-docs/pymarkovclustering/#pymarkovclustering.extract_clusters","title":"extract_clusters","text":"<pre><code>extract_clusters(matrix: csr_matrix, labels: list[str] | None = None) -&gt; list[list[str]]\n</code></pre> <p>Extract clusters from MCL result matrix and map them to labels</p> PARAMETER DESCRIPTION <code>matrix</code> <p>MCL result matrix</p> <p> TYPE: <code>csr_matrix</code> </p> <code>labels</code> <p>List of labels corresponding to matrix indices. If None, <code>'0','1','2'...'X'</code> index label is used.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>clusters</code> <p>List of clusters, where each cluster is a list of labels</p> <p> TYPE: <code>list[list[str]]</code> </p>"},{"location":"api-docs/pymarkovclustering/#pymarkovclustering.random_edges","title":"random_edges","text":"<pre><code>random_edges(\n    node_size: int = 100,\n    /,\n    *,\n    min_cluster_size: int = 1,\n    max_cluster_size: int = 10,\n    min_weight: float = 0.0,\n    max_weight: float = 1.0,\n    random_add_rate: float = 0,\n    random_remove_rate: float = 0,\n    seed: int | None = 0,\n) -&gt; list[tuple[str, str, float]]\n</code></pre> <p>Simple random edges generator for clustering test</p> <p>Node name is set as <code>{ClusterID}_{NodeID in Cluster}</code> e.g. <code>18_2</code></p> PARAMETER DESCRIPTION <code>node_size</code> <p>Total number of nodes to generate</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>min_cluster_size</code> <p>Min-Max size of each cluster</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>max_cluster_size</code> <p>Min-Max size of each cluster</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>min_weight</code> <p>Min-Max weight for edges</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.0</code> </p> <code>max_weight</code> <p>Min-Max weight for edges</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.0</code> </p> <code>random_add_rate</code> <p>Random add, remove edges rate for noisy dataset generation</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>random_remove_rate</code> <p>Random add, remove edges rate for noisy dataset generation</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>seed</code> <p>Random seed for reproducibility</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>0</code> </p> RETURNS DESCRIPTION <code>edges</code> <p>Edges list of tuples</p> <p> TYPE: <code>list[tuple[str, str, float]]</code> </p>"},{"location":"api-docs/pymarkovclustering/#pymarkovclustering.write_clusters","title":"write_clusters","text":"<pre><code>write_clusters(outfile: str | Path, clusters: list[list[str]]) -&gt; None\n</code></pre> <p>Write clusters to file</p> PARAMETER DESCRIPTION <code>outfile</code> <p>Output tab-delimited clusters file</p> <p> TYPE: <code>str | Path</code> </p> <code>clusters</code> <p>List of clusters, each cluster is a list of node labels</p> <p> TYPE: <code>list[list[str]]</code> </p>"},{"location":"api-docs/pymarkovclustering/#pymarkovclustering.write_edges","title":"write_edges","text":"<pre><code>write_edges(outfile: str | Path, edges: list[tuple[str, str, float]]) -&gt; None\n</code></pre> <p>Write edges to file</p> PARAMETER DESCRIPTION <code>outfile</code> <p>Output tab-delimited edges file</p> <p> TYPE: <code>str | Path</code> </p> <code>edges</code> <p>Edges list of tuples</p> <p> TYPE: <code>list[tuple[str, str, float]]</code> </p>"},{"location":"api-docs/pymarkovclustering/#pymarkovclustering.easymclviz","title":"easymclviz","text":"<pre><code>easymclviz(\n    edges: str | Path | list[tuple[str, str, float]],\n    /,\n    *,\n    inflation: float = 2.0,\n    max_iter: int = 100,\n    quiet: bool = True,\n    ax: Axes | None = None,\n    node_size: int = 20,\n    node_cmap: str = \"gist_rainbow\",\n    node_alpha: float = 1.0,\n    edge_width: float = 1.0,\n    edge_color: str = \"lightgray\",\n    show_label: bool = False,\n    label_va: str = \"bottom\",\n    font_size: int = 8,\n) -&gt; Figure\n</code></pre> <p>Run Markov Clustering and visualize clusters using networkx</p> <p>easymclviz automates load edges as matrix, MCL, extract clusters, visualization</p> PARAMETER DESCRIPTION <code>edges</code> <p>Edges(source, target, weight) file or list of tuples</p> <p> TYPE: <code>str | Path | list[tuple[str, str, float]]</code> </p> <code>inflation</code> <p>Inflation factor</p> <p> TYPE: <code>float</code> DEFAULT: <code>2.0</code> </p> <code>max_iter</code> <p>Max number of iterations</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>quiet</code> <p>If True, pring log on screen</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>ax</code> <p>Matplotlib axes. If None, auto created.</p> <p> TYPE: <code>Axes | None</code> DEFAULT: <code>None</code> </p> <code>node_size</code> <p>Node plot size</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> <code>node_cmap</code> <p>Node colormap (e.g. <code>gist_rainbow</code>, <code>jet</code>, <code>viridis</code>, <code>tab20</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'gist_rainbow'</code> </p> <code>node_alpha</code> <p>Node color alpha parameter</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>edge_width</code> <p>Edge line width</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>edge_color</code> <p>Edge color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'lightgray'</code> </p> <code>show_label</code> <p>If True, show node label</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>label_va</code> <p>Node label vertical alignment (<code>top</code>|<code>center</code>|<code>bottom</code>|<code>baseline</code>|<code>center_baseline</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bottom'</code> </p> <code>font_size</code> <p>Node label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>8</code> </p> RETURNS DESCRIPTION <code>fig</code> <p>Matplotlib figure</p> <p> TYPE: <code>Figure</code> </p> Notes <p>Additional installation of <code>networkx</code> and <code>matplotlib</code> are required for MCL clusters visualization. For better position layout, extra packages <code>pygraphviz</code>, <code>pydot</code>, <code>lxml</code> installation is preferred. See https://networkx.org/documentation/stable/install.html in details.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pymarkovclustering as pymcl\n&gt;&gt;&gt; # easymclviz automates load edges as matrix, MCL, extract clusters, visualization\n&gt;&gt;&gt; fig = pymcl.easymclviz(\"edges.tsv\")\n&gt;&gt;&gt; # easymclviz is same as code below\n&gt;&gt;&gt; matrix, labels = pymcl.edges_to_sparse_matrix(\"edges.tsv\")\n&gt;&gt;&gt; mcl_matrix = pymcl.mcl(matrix)\n&gt;&gt;&gt; clusters = pymcl.extract_clusters(mcl_matrix, labels)\n&gt;&gt;&gt; fig = pymcl.mclviz(matrix, labels, clusters)\n</code></pre>"},{"location":"api-docs/pymarkovclustering/#pymarkovclustering.mclviz","title":"mclviz","text":"<pre><code>mclviz(\n    matrix: ndarray | csr_matrix,\n    labels: list[str],\n    clusters: list[list[str]],\n    /,\n    *,\n    ax: Axes | None = None,\n    node_size: int = 20,\n    node_cmap: str = \"gist_rainbow\",\n    node_alpha: float = 1.0,\n    edge_width: float = 1.0,\n    edge_color: str = \"lightgray\",\n    show_label: bool = False,\n    label_va: str = \"bottom\",\n    font_size: int = 8,\n) -&gt; Figure\n</code></pre> <p>Visualize Markov Clustering clusters using networkx</p> PARAMETER DESCRIPTION <code>matrix</code> <p>Adjacency matrix used as MCL input</p> <p> TYPE: <code>ndarray | csr_matrix</code> </p> <code>labels</code> <p>Matrix labels</p> <p> TYPE: <code>list[str]</code> </p> <code>clusters</code> <p>MCL clusters</p> <p> TYPE: <code>list[list[str]]</code> </p> <code>ax</code> <p>Matplotlib axes. If None, auto created.</p> <p> TYPE: <code>Axes | None</code> DEFAULT: <code>None</code> </p> <code>node_size</code> <p>Node plot size</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> <code>node_cmap</code> <p>Node colormap (e.g. <code>gist_rainbow</code>, <code>jet</code>, <code>viridis</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'gist_rainbow'</code> </p> <code>node_alpha</code> <p>Node color alpha parameter</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>edge_width</code> <p>Edge line width</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>edge_color</code> <p>Edge color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'lightgray'</code> </p> <code>show_label</code> <p>If True, show node label</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>label_va</code> <p>Node label vertical alignment (<code>top</code>|<code>center</code>|<code>bottom</code>|<code>baseline</code>|<code>center_baseline</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bottom'</code> </p> <code>font_size</code> <p>Node label size</p> <p> TYPE: <code>int</code> DEFAULT: <code>8</code> </p> RETURNS DESCRIPTION <code>fig</code> <p>Matplotlib figure</p> <p> TYPE: <code>Figure</code> </p> Notes <p>Additional installation of <code>networkx</code> and <code>matplotlib</code> are required for MCL clusters visualization. For better position layout, extra packages <code>pygraphviz</code>, <code>pydot</code>, <code>lxml</code> installation is preferred. See https://networkx.org/documentation/stable/install.html in details.</p>"}]}